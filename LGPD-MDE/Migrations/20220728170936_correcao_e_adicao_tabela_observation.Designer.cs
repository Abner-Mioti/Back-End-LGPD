// <auto-generated />
using System;
using LGPD_MDE.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LGPD_MDE.Migrations
{
    [DbContext(typeof(LgpdDbContext))]
    [Migration("20220728170936_correcao_e_adicao_tabela_observation")]
    partial class correcao_e_adicao_tabela_observation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Areas")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("AREAS");

                    b.HasKey("Id");

                    b.ToTable("AREA", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("CNPJ");

                    b.Property<int>("CompanyCategoryId")
                        .HasColumnType("INT")
                        .HasColumnName("COMPANY_CATEGORY_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("EMAIL");

                    b.Property<int>("FieldId")
                        .HasColumnType("INT")
                        .HasColumnName("FIELD_ID");

                    b.Property<float>("Maturity")
                        .HasColumnType("FLOAT")
                        .HasColumnName("MATURITY");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("DATE")
                        .HasColumnName("MATURITY_DATE");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("MOBILE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("NAME");

                    b.Property<DateTime>("ProgrectionStartDate")
                        .HasColumnType("DATE")
                        .HasColumnName("PROGRECTION_START_DATE");

                    b.Property<ulong>("ProgrectionStatus")
                        .HasColumnType("BIT")
                        .HasColumnName("PROGRECTION_STATUS");

                    b.Property<float>("Progress")
                        .HasColumnType("FLOAT")
                        .HasColumnName("PROGRESS");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INT")
                        .HasColumnName("QUESTION_ID");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("DATE")
                        .HasColumnName("REGISTRATION_DATE");

                    b.Property<int>("ReportPeriodId")
                        .HasColumnType("INT")
                        .HasColumnName("REPORT_PERIOD_ID");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("SITE");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("INT")
                        .HasColumnName("WORKSHOP_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCategoryId");

                    b.HasIndex("FieldId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ReportPeriodId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("COMPANY", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.CompanyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("CATEGORY");

                    b.HasKey("Id");

                    b.ToTable("COMPANY_CATEGORY", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Exceptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DATE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1100)")
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("MESSAGE");

                    b.HasKey("Id");

                    b.ToTable("EXCEPTIONS", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("FIELDS");

                    b.HasKey("Id");

                    b.ToTable("FIELD", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Impact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Impacts")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("IMPACTS");

                    b.HasKey("Id");

                    b.ToTable("IMPACT", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("OBSERVATIONS");

                    b.HasKey("Id");

                    b.ToTable("OBSERVATION", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Probability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Probabilitys")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("PROBABILITYS");

                    b.HasKey("Id");

                    b.ToTable("PROBABILITY", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("ACTION");

                    b.Property<int>("AreaId")
                        .HasColumnType("INT")
                        .HasColumnName("AREA_ID");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("EFFECT");

                    b.Property<int>("ImpactId")
                        .HasColumnType("INT")
                        .HasColumnName("IMPACT_ID");

                    b.Property<int>("ObservationId")
                        .HasColumnType("INT")
                        .HasColumnName("OBSERVATION_ID");

                    b.Property<int>("ProbabilityId")
                        .HasColumnType("INT")
                        .HasColumnName("PROBABILITY_ID");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("INT")
                        .HasColumnName("QUESTION_CATEGORY_ID");

                    b.Property<ulong>("RepliedStatus")
                        .HasColumnType("BIT")
                        .HasColumnName("REPLIED_STATUS");

                    b.Property<int>("Reply")
                        .HasColumnType("INT")
                        .HasColumnName("REPLY");

                    b.Property<int>("RiskId")
                        .HasColumnType("INT")
                        .HasColumnName("RISK_ID");

                    b.Property<ulong>("SuitableStatus")
                        .HasColumnType("BIT")
                        .HasColumnName("SUITABLE_STATUS");

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("WORDING");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ImpactId");

                    b.HasIndex("ObservationId");

                    b.HasIndex("ProbabilityId");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("RiskId");

                    b.ToTable("QUESTION", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("CATEGORY");

                    b.HasKey("Id");

                    b.ToTable("QUESTION_CATEGORY", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.ReportPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("PERIOD");

                    b.HasKey("Id");

                    b.ToTable("REPORT_PERIOD", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Risks")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("RISKS");

                    b.HasKey("Id");

                    b.ToTable("RISK", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("EMAIL");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("BIT")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("JOB_TITLE");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("MOBILE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("USER");

                    b.HasKey("Id");

                    b.ToTable("USUARIO", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DATE");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("MEETING_LINK");

                    b.HasKey("Id");

                    b.ToTable("WORKSHOP", (string)null);
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Company", b =>
                {
                    b.HasOne("LGPD_MDE.Entities.Generated.CompanyCategory", "EnterpriseCategory")
                        .WithMany("Enterprise")
                        .HasForeignKey("CompanyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.Field", "Field")
                        .WithMany("Enterprise")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.Question", "Question")
                        .WithMany("Enterprise")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.ReportPeriod", "ReportPeriod")
                        .WithMany("Enterprise")
                        .HasForeignKey("ReportPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.Workshop", "Workshop")
                        .WithMany("Enterprise")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnterpriseCategory");

                    b.Navigation("Field");

                    b.Navigation("Question");

                    b.Navigation("ReportPeriod");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Question", b =>
                {
                    b.HasOne("LGPD_MDE.Entities.Generated.Area", "Area")
                        .WithMany("Question")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.Impact", "Impact")
                        .WithMany("Question")
                        .HasForeignKey("ImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.Observation", "Observation")
                        .WithMany("Question")
                        .HasForeignKey("ObservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.Probability", "Probability")
                        .WithMany("Question")
                        .HasForeignKey("ProbabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.QuestionCategory", "QuestionCategory")
                        .WithMany("Question")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LGPD_MDE.Entities.Generated.Risk", "Risk")
                        .WithMany("Question")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Impact");

                    b.Navigation("Observation");

                    b.Navigation("Probability");

                    b.Navigation("QuestionCategory");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Area", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.CompanyCategory", b =>
                {
                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Field", b =>
                {
                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Impact", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Observation", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Probability", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Question", b =>
                {
                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.QuestionCategory", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.ReportPeriod", b =>
                {
                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Risk", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("LGPD_MDE.Entities.Generated.Workshop", b =>
                {
                    b.Navigation("Enterprise");
                });
#pragma warning restore 612, 618
        }
    }
}
